#!/usr/bin/env ruby
require 'fileutils'
require 'shellwords'

IGNORED_FILES = %w{.DS_Store .. .}

def show_help
  puts <<~EOF
Usage: #{File.basename($0)} [OPTIONS] DIRECTORY

Create a folder for each file and move the file into its folder.

ARGUMENTS:
  DIRECTORY    Directory containing files to organize into folders

OPTIONS:
  -h, --help   Show this help message and exit

DESCRIPTION:
  For each file in the directory, this script creates a new folder with
  the same name as the file (without extension) and moves the file into
  that folder. This is useful for organizing files where each file needs
  its own dedicated folder.

EXAMPLES:
  #{File.basename($0)} ~/Downloads/
  # Creates folders: Report/ (containing Report.pdf), Photo/ (containing Photo.jpg), etc.

EOF
end

def folderify_one_file(file, directory_name)
  file_path = "#{directory_name}/#{file}"
  
  # Skip if it's already a directory
  return if File.directory?(file_path)
  
  filename_parts = file.split('.')
  file_name_no_extension = filename_parts.take(filename_parts.size - 1).join('.')
  
  # Skip if no extension found
  return if file_name_no_extension.empty?
  
  old_path = file_path
  new_folder = "#{directory_name}/#{file_name_no_extension}"
  new_path = "#{new_folder}/#{file}"
  
  # Skip if target folder already exists and contains the file
  if File.exists?(new_path)
    puts "  Skipping #{file} - already exists in folder"
    return
  end
  
  FileUtils.mkdir_p(new_folder)
  FileUtils.mv(old_path, new_path)
  puts "  #{file} -> #{file_name_no_extension}/#{file}"
end

def folderify_files(directory_name)
  unless File.directory?(directory_name)
    puts "Error: '#{directory_name}' is not a valid directory"
    exit 1
  end

  all_files = Dir.entries(directory_name)
  good_files = all_files - IGNORED_FILES
  
  # Only process actual files, not directories
  actual_files = good_files.select { |f| File.file?("#{directory_name}/#{f}") }

  if actual_files.empty?
    puts "No files found to organize in #{directory_name}"
    return
  end

  puts "Organizing #{actual_files.count} files in #{directory_name}:"
  actual_files.each do |file|
    folderify_one_file(file, directory_name)
  end
  
  puts "Organization complete"
end

# Parse command line arguments
if ARGV.include?('-h') || ARGV.include?('--help')
  show_help
  exit 0
end

if ARGV.empty?
  puts "Error: No directory specified"
  puts ""
  show_help
  exit 1
end

folderify_files(ARGV[0])