#!/usr/bin/env ruby

# TODO: Update this to REALLY slim down the output
#       one line per thing, ideally
# TODO: Add a "deepclean" that is interactive, and offers to update global .tool-versions

require_relative '../lib/terminal_helpers'

def update_repository
  pputs "Updating osx_setup repository...", indent: 1, style: :bold

  pprint "Running git pull --rebase", indent: 2
  if system("git pull --rebase > /dev/null 2>&1")
    print_column_fill("  Running git pull --rebase", indent: 2, color: :green)
    pputs " completed", color: :green
  else
    print_column_fill("  Running git pull --rebase", indent: 2, color: :yellow)
    pputs " up-to-date or failed", color: :yellow
  end

  pputs ""
end

def update_asdf_plugins
  pputs "Updating asdf plugins...", indent: 1, style: :bold

  # Get list of installed asdf plugins
  installed_plugins = `asdf plugin list`.strip.split("\n")

  if installed_plugins.empty?
    pputs "No asdf plugins installed", indent: 2, color: :yellow
  else
    pputs "Found #{installed_plugins.length} asdf plugins", indent: 2
    
    installed_plugins.each do |plugin|
      pprint "#{plugin}", indent: 2
      
      if system("asdf plugin update #{plugin} > /dev/null 2>&1")
        print_column_fill("  #{plugin}", indent: 2, color: :green)
        pputs " updated", color: :green
      else
        print_column_fill("  #{plugin}", indent: 2, color: :yellow)
        pputs " failed", color: :yellow
      end
    end
  end

  pputs ""
  return installed_plugins
end

def check_tool_versions(installed_plugins)
  return if installed_plugins.empty?
  
  pputs "Checking for newer versions of installed tools...", indent: 1, style: :bold
  
  installed_plugins.each do |plugin|
    current_version = `asdf current #{plugin} 2>/dev/null | awk '{print $2}'`.strip
    latest_version = `asdf latest #{plugin} 2>/dev/null`.strip
    
    if current_version != "" && latest_version != "" && current_version != latest_version
      pprint "#{plugin}: #{current_version} -> #{latest_version} available", indent: 2, color: :yellow
      pputs ""
    end
  end
  
  pputs ""
end

def update_oh_my_zsh
  pputs "Updating oh-my-zsh...", indent: 1, style: :bold

  pprint "Updating oh-my-zsh", indent: 2
  if system("cd ~/.oh-my-zsh && git pull > /dev/null 2>&1")
    print_column_fill("  Updating oh-my-zsh", indent: 2, color: :green)
    pputs " completed", color: :green
  else
    print_column_fill("  Updating oh-my-zsh", indent: 2, color: :yellow)
    pputs " up-to-date or failed", color: :yellow
  end

  pputs ""
end

def update_homebrew_packages
  pputs "Updating Homebrew packages...", indent: 1, style: :bold

  pprint "Running brew upgrade", indent: 2
  if system("brew upgrade")
    print_column_fill("  Running brew upgrade", indent: 2, color: :green)
    pputs " completed", color: :green
  else
    print_column_fill("  Running brew upgrade", indent: 2, color: :red)
    pputs " failed", color: :red
  end

  pputs ""
end

def verify_brewfile_packages
  pputs "Verifying Brewfile packages...", indent: 1, style: :bold

  pprint "Checking Brewfile compliance", indent: 2
  if system("brew bundle check --file=data/Brewfile > /dev/null 2>&1")
    print_column_fill("  Checking Brewfile compliance", indent: 2, color: :green)
    pputs " all packages installed", color: :green
  else
    print_column_fill("  Checking Brewfile compliance", indent: 2, color: :yellow)
    pputs " missing packages found", color: :yellow
    pputs "Run 'brew bundle --file=data/Brewfile' to install missing packages", indent: 3, color: :cyan
  end

  pputs ""
end

def sync_dotfiles
  # TODO: Implement unattended mode for sync_dotfiles to avoid user input prompts
  pputs "Skipping dotfiles sync (requires user input)", indent: 1, style: :italic, color: :yellow
  pputs "Run 'bin/sync_dotfiles' manually if needed", indent: 2, color: :cyan
  pputs ""
end

def sync_app_configurations
  pputs "Syncing app configurations...", indent: 1, style: :bold

  pprint "Running setup_app_configs", indent: 2
  if system("bin/setup_app_configs > /dev/null 2>&1")
    print_column_fill("  Running setup_app_configs", indent: 2, color: :green)
    pputs " completed", color: :green
  else
    print_column_fill("  Running setup_app_configs", indent: 2, color: :yellow)
    pputs " failed", color: :yellow
  end

  pputs ""
end

def cleanup_system
  pputs "Cleaning up...", indent: 1, style: :bold

  pprint "Running brew cleanup", indent: 2
  if system("brew cleanup > /dev/null 2>&1")
    print_column_fill("  Running brew cleanup", indent: 2, color: :green)
    pputs " completed", color: :green
  else
    print_column_fill("  Running brew cleanup", indent: 2, color: :yellow)
    pputs " failed", color: :yellow
  end

  pputs ""
end

def run_health_checks
  pputs "Running health checks...", indent: 1, style: :bold

  critical_tools = ["ruby", "node", "python", "git"]
  critical_tools.each do |tool|
    pprint "#{tool}", indent: 2
    version_output = `#{tool} --version 2>/dev/null`.strip
    if $?.success? && !version_output.empty?
      print_column_fill("  #{tool}", indent: 2, color: :green)
      pputs " #{version_output.split("\n").first}", color: :green
    else
      print_column_fill("  #{tool}", indent: 2, color: :red)
      pputs " not found or error", color: :red
    end
  end
end

# Main execution
section_header("System Hygiene & Updates")

pputs "Keeping your development environment fresh and up-to-date", indent: 1, color: :cyan

update_repository
installed_plugins = update_asdf_plugins
check_tool_versions(installed_plugins)
update_oh_my_zsh
update_homebrew_packages
verify_brewfile_packages
# sync_dotfiles
sync_app_configurations
cleanup_system
run_health_checks

section_footer("System hygiene complete")