#!/usr/bin/env ruby


# TODO: add shottr settings
# TODO: Sync stream deck profiles

require_relative '../lib/terminal_helpers'

class AppConfigsSetup

  # Path constants
  ICLOUD_DRIVE_PATH = '~/Library/Mobile Documents/com~apple~CloudDocs'
  APP_SETTINGS_SUBDIR = 'App settings sync'
  KARABINER_LOCAL_PATH = '~/.config/karabiner'
  KARABINER_SUBDIR = 'karabiner'
  ITERM2_SUBDIR = 'iTerm2'
  ALFRED_SUBDIR = 'Alfred'

  def initialize
    @icloud_drive = ICLOUD_DRIVE_PATH
    @icloud_base = File.join(@icloud_drive, APP_SETTINGS_SUBDIR)
  end

  def run
    section_header "App-Specific Configuration Setup"
    
    # Verify iCloud Drive exists before proceeding
    expanded_icloud_path = File.expand_path(@icloud_drive)
    unless File.exist?(expanded_icloud_path)
      pputs "iCloud Drive not found at: #{expanded_icloud_path}", color: :red
      pputs "This computer may not be syncing with iCloud Drive", color: :red
      exit 1
    end
    
    setup_karabiner
    setup_iterm2
    setup_alfred
    
    section_footer "App configuration setup complete"
  end

  private

  def setup_karabiner
    # Based on https://karabiner-elements.pqrs.org/docs/manual/misc/configuration-file-path/
    pputs "Setting up Karabiner Elements configuration", color: :cyan, style: :bold
    
    local_config_path = File.expand_path(KARABINER_LOCAL_PATH)
    expanded_icloud_base = File.expand_path(@icloud_base)
    icloud_config_path = File.join(expanded_icloud_base, KARABINER_SUBDIR)
    
    unless File.exist?(icloud_config_path)
      pputs "Karabiner config not found at: #{icloud_config_path}", color: :red
      return
    end
    
    # Check existing config and handle appropriately
    if File.exist?(local_config_path)
      if File.symlink?(local_config_path)
        current_target = File.readlink(local_config_path)
        if current_target == icloud_config_path
          pputs "Symlink already points to correct target: #{local_config_path} → #{icloud_config_path}", color: :green
          return
        else
          pputs "Removing symlink pointing to wrong target: #{local_config_path} → #{current_target}", color: :yellow
          File.unlink(local_config_path)
        end
      else
        pputs "Removing existing directory: #{local_config_path}", color: :yellow
        FileUtils.rm_rf(local_config_path)
      end
    end
    
    # Create parent directory if needed
    config_dir = File.dirname(local_config_path)
    FileUtils.mkdir_p(config_dir) unless File.exist?(config_dir)
    
    # Create symlink
    File.symlink(icloud_config_path, local_config_path)
    pputs "Created symlink: #{local_config_path} → #{icloud_config_path}", color: :green
  end

  def setup_iterm2
    pputs "Setting up iTerm2 configuration", color: :cyan, style: :bold
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    iterm_sync_dir = File.join(expanded_icloud_base, ITERM2_SUBDIR)
    
    unless File.exist?(iterm_sync_dir)
      pputs "iTerm2 config not found at: #{iterm_sync_dir}", color: :red
      return
    end
    
    # Check current settings
    load_prefs_current = `defaults read com.googlecode.iterm2 LoadPrefsFromCustomFolder 2>/dev/null`.strip
    prefs_folder_current = `defaults read com.googlecode.iterm2 PrefsCustomFolder 2>/dev/null`.strip
    no_sync_current = `defaults read com.googlecode.iterm2 NoSyncNeverRemindPrefsChangesLostForFile 2>/dev/null`.strip
    
    # Check if settings are already correct
    settings_correct = (
      load_prefs_current == "1" &&
      prefs_folder_current == iterm_sync_dir &&
      no_sync_current == "1"
    )
    
    if settings_correct
      pputs "iTerm2 preferences already configured correctly", color: :green
      return
    end
    
    # Quit iTerm2 if running
    if system("pgrep -q iTerm2")
      pputs "Quitting iTerm2...", color: :yellow
      system("osascript -e 'tell application \"iTerm2\" to quit'")
      sleep 2  # Give iTerm2 time to fully quit
    end
    
    # Set preferences
    pputs "Configuring iTerm2 preferences...", indent: 1
    
    if load_prefs_current != "1"
      system("defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true")
      pputs "Set LoadPrefsFromCustomFolder to true", indent: 2, color: :green
    end
    
    if prefs_folder_current != iterm_sync_dir
      system("defaults write com.googlecode.iterm2 PrefsCustomFolder -string \"#{iterm_sync_dir}\"")
      pputs "Set PrefsCustomFolder to #{iterm_sync_dir}", indent: 2, color: :green
    end
    
    if no_sync_current != "1"
      system("defaults write com.googlecode.iterm2 NoSyncNeverRemindPrefsChangesLostForFile -bool true")
      pputs "Set NoSyncNeverRemindPrefsChangesLostForFile to true", indent: 2, color: :green
    end
    
    pputs "iTerm2 configuration complete. Restart iTerm2 to apply changes.", color: :green
  end

  def setup_alfred
    pputs "Setting up Alfred configuration", color: :cyan, style: :bold
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    alfred_sync_dir = File.join(expanded_icloud_base, ALFRED_SUBDIR)
    
    unless File.exist?(alfred_sync_dir)
      pputs "Alfred config not found at: #{alfred_sync_dir}", color: :red
      return
    end
    
    # Check current settings
    sync_folder_current = `defaults read com.runningwithcrayons.Alfred syncfolder 2>/dev/null`.strip
    syncing_current = `defaults read com.runningwithcrayons.Alfred syncing 2>/dev/null`.strip
    
    # Check if settings are already correct
    settings_correct = (
      sync_folder_current == alfred_sync_dir &&
      syncing_current == "1"
    )
    
    if settings_correct
      pputs "Alfred preferences already configured correctly", color: :green
      return
    end
    
    # Quit Alfred if running
    if system("pgrep -q Alfred")
      pputs "Quitting Alfred...", color: :yellow
      system("osascript -e 'tell application \"Alfred\" to quit'")
      sleep 2  # Give Alfred time to fully quit
    end
    
    # Set preferences
    pputs "Configuring Alfred preferences...", indent: 1
    
    if sync_folder_current != alfred_sync_dir
      system("defaults write com.runningwithcrayons.Alfred syncfolder -string \"#{alfred_sync_dir}\"")
      pputs "Set syncfolder to #{alfred_sync_dir}", indent: 2, color: :green
    end
    
    if syncing_current != "1"
      system("defaults write com.runningwithcrayons.Alfred syncing -bool true")
      pputs "Set syncing to true", indent: 2, color: :green
    end
    
    pputs "Alfred configuration complete. Restart Alfred to apply changes.", color: :green
  end
end

if __FILE__ == $0
  AppConfigsSetup.new.run
end