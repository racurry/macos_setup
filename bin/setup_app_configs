#!/usr/bin/env ruby

require 'fileutils'
require_relative '../lib/terminal_helpers'

class AppConfigsSetup

  # Path constants
  ICLOUD_DRIVE_PATH = '~/Library/Mobile Documents/com~apple~CloudDocs'
  APP_SETTINGS_SUBDIR = 'App settings sync'
  KARABINER_LOCAL_PATH = '~/.config/karabiner'
  KARABINER_SUBDIR = 'karabiner'
  ITERM2_SUBDIR = 'iTerm2'
  STREAM_DECK_SUBDIR = 'Stream deck (export)'
  MOOM_SUBDIR = 'Moom (export)'
  MOOM_LOCAL_PATH = '~/Library/Preferences/com.manytricks.Moom.plist'

  def initialize
    @icloud_drive = ICLOUD_DRIVE_PATH
    @icloud_base = File.join(@icloud_drive, APP_SETTINGS_SUBDIR)
  end

  def run
    export_mode = ARGV.include?('--export')
    import_mode = ARGV.include?('--import')
    
    if export_mode
      section_header "Exporting App Configurations to iCloud"
    elsif import_mode
      section_header "Importing App Configurations from iCloud"
    else
      section_header "App-Specific Configuration Setup"
    end
    
    # Verify iCloud Drive exists before proceeding
    expanded_icloud_path = File.expand_path(@icloud_drive)
    unless File.exist?(expanded_icloud_path)
      pputs "iCloud Drive not found at: #{expanded_icloud_path}", color: :red
      pputs "This computer may not be syncing with iCloud Drive", color: :red
      exit 1
    end
    
    if export_mode
      export_stream_deck
      export_moom
    elsif import_mode
      import_stream_deck
      import_moom
    else
      setup_karabiner
      setup_iterm2
    end
    
    if export_mode
      section_footer "App configuration export complete"
    elsif import_mode
      section_footer "App configuration import complete"
    else
      section_footer "App configuration setup complete"
    end
  end

  private

  def setup_karabiner
    # Based on https://karabiner-elements.pqrs.org/docs/manual/misc/configuration-file-path/
    pputs "Setting up Karabiner Elements configuration", color: :cyan, style: :bold
    
    local_config_path = File.expand_path(KARABINER_LOCAL_PATH)
    expanded_icloud_base = File.expand_path(@icloud_base)
    icloud_config_path = File.join(expanded_icloud_base, KARABINER_SUBDIR)
    
    unless File.exist?(icloud_config_path)
      pputs "Karabiner config not found at: #{icloud_config_path}", color: :red
      return
    end
    
    # Check existing config and handle appropriately
    if File.exist?(local_config_path)
      if File.symlink?(local_config_path)
        current_target = File.readlink(local_config_path)
        if current_target == icloud_config_path
          pputs "Symlink already points to correct target: #{local_config_path} → #{icloud_config_path}", color: :green
          return
        else
          pputs "Removing symlink pointing to wrong target: #{local_config_path} → #{current_target}", color: :yellow
          File.unlink(local_config_path)
        end
      else
        pputs "Removing existing directory: #{local_config_path}", color: :yellow
        FileUtils.rm_rf(local_config_path)
      end
    end
    
    # Create parent directory if needed
    config_dir = File.dirname(local_config_path)
    FileUtils.mkdir_p(config_dir) unless File.exist?(config_dir)
    
    # Create symlink
    File.symlink(icloud_config_path, local_config_path)
    pputs "Created symlink: #{local_config_path} → #{icloud_config_path}", color: :green
  end

  def setup_iterm2
    pputs "Setting up iTerm2 configuration", color: :cyan, style: :bold
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    iterm_sync_dir = File.join(expanded_icloud_base, ITERM2_SUBDIR)
    
    unless File.exist?(iterm_sync_dir)
      pputs "iTerm2 config not found at: #{iterm_sync_dir}", color: :red
      return
    end
    
    # Check current settings
    load_prefs_current = `defaults read com.googlecode.iterm2 LoadPrefsFromCustomFolder 2>/dev/null`.strip
    prefs_folder_current = `defaults read com.googlecode.iterm2 PrefsCustomFolder 2>/dev/null`.strip
    no_sync_current = `defaults read com.googlecode.iterm2 NoSyncNeverRemindPrefsChangesLostForFile 2>/dev/null`.strip
    
    # Check if settings are already correct
    settings_correct = (
      load_prefs_current == "1" &&
      prefs_folder_current == iterm_sync_dir &&
      no_sync_current == "1"
    )
    
    if settings_correct
      pputs "iTerm2 preferences already configured correctly", color: :green
      return
    end
    
    # Quit iTerm2 if running
    if system("pgrep -q iTerm2")
      pputs "Quitting iTerm2...", color: :yellow
      system("osascript -e 'tell application \"iTerm2\" to quit'")
      sleep 2  # Give iTerm2 time to fully quit
    end
    
    # Set preferences
    pputs "Configuring iTerm2 preferences...", indent: 1
    
    if load_prefs_current != "1"
      system("defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true")
      pputs "Set LoadPrefsFromCustomFolder to true", indent: 2, color: :green
    end
    
    if prefs_folder_current != iterm_sync_dir
      system("defaults write com.googlecode.iterm2 PrefsCustomFolder -string \"#{iterm_sync_dir}\"")
      pputs "Set PrefsCustomFolder to #{iterm_sync_dir}", indent: 2, color: :green
    end
    
    if no_sync_current != "1"
      system("defaults write com.googlecode.iterm2 NoSyncNeverRemindPrefsChangesLostForFile -bool true")
      pputs "Set NoSyncNeverRemindPrefsChangesLostForFile to true", indent: 2, color: :green
    end
    
    pputs "iTerm2 configuration complete. Restart iTerm2 to apply changes.", color: :green
  end


  def import_stream_deck
    pputs "Importing Stream Deck configuration", color: :cyan, style: :bold
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    stream_deck_sync_dir = File.join(expanded_icloud_base, STREAM_DECK_SUBDIR)
    
    unless File.exist?(stream_deck_sync_dir)
      pputs "Stream Deck config not found at: #{stream_deck_sync_dir}", color: :red
      pputs "Run with --export flag first to create initial backup", color: :yellow
      return
    end
    
    local_profiles_dir = File.expand_path("~/Library/Application Support/com.elgato.StreamDeck/ProfilesV2")
    
    unless File.exist?(local_profiles_dir)
      pputs "Local Stream Deck profiles not found at: #{local_profiles_dir}", color: :yellow
      pputs "Stream Deck may not be installed or never configured", color: :yellow
      return
    end
    
    # Check if already synced (simple check for sync dir existence and non-empty)
    if File.exist?(local_profiles_dir) && !Dir.empty?(local_profiles_dir)
      synced_profiles = Dir.glob("#{stream_deck_sync_dir}/*")
      if synced_profiles.any?
        pputs "Stream Deck profiles appear to be synced already", color: :green
        return
      end
    end
    
    # Quit Stream Deck if running
    if system("pgrep -q 'Stream Deck'")
      pputs "Quitting Stream Deck...", color: :yellow
      # Try graceful quit first, then force quit if needed
      system("osascript -e 'tell application \"Elgato Stream Deck\" to quit' 2>/dev/null || pkill -f 'Stream Deck'")
      sleep 2
    end
    
    pputs "Restoring Stream Deck profiles from iCloud...", indent: 1
    
    # Backup existing local profiles first
    if File.exist?(local_profiles_dir) && !Dir.empty?(local_profiles_dir)
      backup_dir = "#{local_profiles_dir}.backup.#{Time.now.strftime('%Y%m%d_%H%M%S')}"
      system("cp -R \"#{local_profiles_dir}\" \"#{backup_dir}\"")
      pputs "Backed up existing profiles to: #{backup_dir}", indent: 2, color: :cyan
    end
    
    # Copy from iCloud to local
    system("rsync -av \"#{stream_deck_sync_dir}/\" \"#{local_profiles_dir}/\"")
    pputs "Restored Stream Deck profiles from iCloud", indent: 2, color: :green
    
    pputs "Stream Deck configuration complete. Restart Stream Deck to apply changes.", color: :green
  end

  def export_stream_deck
    pputs "Exporting Stream Deck configuration", color: :cyan, style: :bold
    
    local_profiles_dir = File.expand_path("~/Library/Application Support/com.elgato.StreamDeck/ProfilesV2")
    
    unless File.exist?(local_profiles_dir)
      pputs "Local Stream Deck profiles not found at: #{local_profiles_dir}", color: :red
      pputs "Stream Deck may not be installed or never configured", color: :red
      return
    end
    
    if Dir.empty?(local_profiles_dir)
      pputs "No Stream Deck profiles found to export", color: :yellow
      return
    end
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    stream_deck_sync_dir = File.join(expanded_icloud_base, STREAM_DECK_SUBDIR)
    
    # Create iCloud sync directory if needed
    unless File.exist?(stream_deck_sync_dir)
      FileUtils.mkdir_p(stream_deck_sync_dir)
      pputs "Created iCloud sync directory: #{stream_deck_sync_dir}", indent: 1, color: :cyan
    end
    
    # Quit Stream Deck if running
    if system("pgrep -q 'Stream Deck'")
      pputs "Quitting Stream Deck...", color: :yellow
      # Try graceful quit first, then force quit if needed
      system("osascript -e 'tell application \"Elgato Stream Deck\" to quit' 2>/dev/null || pkill -f 'Stream Deck'")
      sleep 2
    end
    
    pputs "Copying Stream Deck profiles to iCloud...", indent: 1
    
    # Backup existing iCloud profiles first
    if File.exist?(stream_deck_sync_dir) && !Dir.empty?(stream_deck_sync_dir)
      backup_dir = "#{stream_deck_sync_dir}.backup.#{Time.now.strftime('%Y%m%d_%H%M%S')}"
      system("cp -R \"#{stream_deck_sync_dir}\" \"#{backup_dir}\"")
      pputs "Backed up existing iCloud profiles to: #{backup_dir}", indent: 2, color: :cyan
    end
    
    # Copy from local to iCloud
    system("rsync -av --delete \"#{local_profiles_dir}/\" \"#{stream_deck_sync_dir}/\"")
    pputs "Exported Stream Deck profiles to iCloud", indent: 2, color: :green
    
    pputs "Stream Deck export complete. Configuration is now synced to iCloud.", color: :green
  end

  def export_moom
    pputs "Exporting Moom configuration", color: :cyan, style: :bold
    
    local_plist_path = File.expand_path(MOOM_LOCAL_PATH)
    
    unless File.exist?(local_plist_path)
      pputs "Local Moom preferences not found at: #{local_plist_path}", color: :red
      pputs "Moom may not be installed or never configured", color: :red
      return
    end
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    moom_sync_dir = File.join(expanded_icloud_base, MOOM_SUBDIR)
    
    # Create iCloud sync directory if needed
    unless File.exist?(moom_sync_dir)
      FileUtils.mkdir_p(moom_sync_dir)
      pputs "Created iCloud sync directory: #{moom_sync_dir}", indent: 1, color: :cyan
    end
    
    # Quit Moom if running
    if system("pgrep -q Moom")
      pputs "Quitting Moom...", color: :yellow
      system("osascript -e 'tell application \"Moom\" to quit'")
      sleep 2
    end
    
    pputs "Copying Moom preferences to iCloud...", indent: 1
    
    # Backup existing iCloud plist first
    icloud_plist_path = File.join(moom_sync_dir, "com.manytricks.Moom.plist")
    if File.exist?(icloud_plist_path)
      backup_plist_path = "#{icloud_plist_path}.backup.#{Time.now.strftime('%Y%m%d_%H%M%S')}"
      system("cp \"#{icloud_plist_path}\" \"#{backup_plist_path}\"")
      pputs "Backed up existing iCloud preferences to: #{backup_plist_path}", indent: 2, color: :cyan
    end
    
    # Copy plist file to iCloud
    system("cp \"#{local_plist_path}\" \"#{icloud_plist_path}\"")
    pputs "Exported Moom preferences to iCloud", indent: 2, color: :green
    
    pputs "Moom export complete. Configuration is now synced to iCloud.", color: :green
  end

  def import_moom
    pputs "Importing Moom configuration", color: :cyan, style: :bold
    
    expanded_icloud_base = File.expand_path(@icloud_base)
    moom_sync_dir = File.join(expanded_icloud_base, MOOM_SUBDIR)
    icloud_plist_path = File.join(moom_sync_dir, "com.manytricks.Moom.plist")
    
    unless File.exist?(icloud_plist_path)
      pputs "Moom config not found at: #{icloud_plist_path}", color: :red
      pputs "Run with --export flag first to create initial backup", color: :yellow
      return
    end
    
    local_plist_path = File.expand_path(MOOM_LOCAL_PATH)
    
    # Check if files are identical (simple comparison)
    if File.exist?(local_plist_path)
      if system("diff -q \"#{local_plist_path}\" \"#{icloud_plist_path}\" > /dev/null 2>&1")
        pputs "Moom preferences already match iCloud version", color: :green
        return
      end
    end
    
    # Quit Moom if running
    if system("pgrep -q Moom")
      pputs "Quitting Moom...", color: :yellow
      system("osascript -e 'tell application \"Moom\" to quit'")
      sleep 2
    end
    
    pputs "Restoring Moom preferences from iCloud...", indent: 1
    
    # Backup existing local preferences first
    if File.exist?(local_plist_path)
      backup_path = "#{local_plist_path}.backup.#{Time.now.strftime('%Y%m%d_%H%M%S')}"
      system("cp \"#{local_plist_path}\" \"#{backup_path}\"")
      pputs "Backed up existing preferences to: #{backup_path}", indent: 2, color: :cyan
    end
    
    # Copy from iCloud to local
    system("cp \"#{icloud_plist_path}\" \"#{local_plist_path}\"")
    pputs "Restored Moom preferences from iCloud", indent: 2, color: :green
    
    pputs "Moom configuration complete. Restart Moom to apply changes.", color: :green
  end
end

AppConfigsSetup.new.run