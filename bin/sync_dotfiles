#!/usr/bin/env ruby

require 'io/console'
require_relative '../lib/terminal_helpers.rb'

HOME_DIR = File.expand_path('~')
DOTFILES_PATH = '/data/dotfiles'
IGNORED_FILES = %w{.DS_Store .. .}

def local_dotfiles_dir
  "#{Dir.pwd}#{DOTFILES_PATH}"
end

def backup_and_replace(dotfile_name:, local_dotfile_path:, home_dir_dotfile_path:)
  print " Backing up #{dotfile_name}..."
  File.rename(home_dir_dotfile_path, "#{home_dir_dotfile_path}.backup")
  pputs "Done!", color: :green, style: :bold
  print "    Linking #{dotfile_name}..."
  File.symlink(local_dotfile_path, home_dir_dotfile_path)
  pprint "Done!", color: :green, style: :bold
  pputs " The back up file is at #{home_dir_dotfile_path}.backup", style: :italic
end

def skip_file(dotfile_name)
  pputs " Skipping #{dotfile_name}", color: :yellow, style: :italic
end

def handle_conflict_with_guidance(dotfile_name:, local_dotfile_path:, home_dir_dotfile_path:)
  print " What should I do?"
  pprint " (s=skip,r=replace,b=back up existing then replace): ", color: :cyan, style: :italic

  response = STDIN.getch

  case response
  when 's'
    skip_file(dotfile_name)
  when 'r'
    print " Replacing #{dotfile_name}..."
    File.delete(home_dir_dotfile_path)
    File.symlink(local_dotfile_path, home_dir_dotfile_path)
    pputs "Done!", color: :green, style: :bold
  when 'b'
    backup_and_replace(dotfile_name: dotfile_name, local_dotfile_path: local_dotfile_path, home_dir_dotfile_path: home_dir_dotfile_path)
  else
    pputs "That was gibberish, I am skipping", color: :red
  end
end

def sync_file(dotfile_name:, unattended:false, skip_conflicts:false)
  home_dir_dotfile_path = "#{HOME_DIR}/#{dotfile_name}"
  local_dotfile_path = "#{local_dotfiles_dir}/#{dotfile_name}"

  if !File.exist?(local_dotfile_path)
    raise "WHAT ARE YOU DOING IDIOT??  There is no #{local_dotfile_path}"
  end

  if File.exist?(home_dir_dotfile_path) || File.symlink?(home_dir_dotfile_path)
    pprint "    #{dotfile_name} already exists!", style: :bold
    if unattended
      backup_and_replace(dotfile_name:dotfile_name, local_dotfile_path:local_dotfile_path, home_dir_dotfile_path:home_dir_dotfile_path)
    elsif skip_conflicts
      skip_file(dotfile_name)
     else
      handle_conflict_with_guidance(dotfile_name:dotfile_name, local_dotfile_path:local_dotfile_path, home_dir_dotfile_path:home_dir_dotfile_path)
    end
  else
    print "    #{dotfile_name} doesn't exist. Adding..."
    File.symlink(local_dotfile_path, home_dir_dotfile_path)
      pputs "Done!", color: :green, style: :bold
  end
end

def sync_dotfiles(options)
  unattended = options.include?('--unattended')
  skip_conflicts = options.include?('--skip_conflicts')

  section_header "Syncing dotfiles #{unattended ? '(unattended mode)' : ''}"

  all_files = Dir.entries(local_dotfiles_dir)
  dotfiles = all_files - IGNORED_FILES
  dotfiles.each do |dotfile|
    sync_file(dotfile_name:dotfile, unattended:unattended, skip_conflicts:skip_conflicts)
  end
end

sync_dotfiles(ARGV)