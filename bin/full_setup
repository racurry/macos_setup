#!/usr/bin/env ruby

# TODO: extract the entrypoint logic into its own script

require 'fileutils'
require_relative '../lib/terminal_helpers.rb'
require_relative '../lib/sudo_manager.rb'

BIN_PATH = "./bin"
DATA_PATH="./data"
TRACKING_FILES_PATH="#{DATA_PATH}/.meta/last_run"
DATA_FILE_EXTENSIONS = %w{txt json}

def data_file(filename)
  DATA_FILE_EXTENSIONS.each do |extension|
    filepath = "#{DATA_PATH}/#{filename}.#{extension}"
    return filepath if File.exist?(filepath)
  end
  nil
end

def run_file(filename, options=[])
  tracking_filepath = "#{TRACKING_FILES_PATH}/#{filename}"
  bin_filepath = "#{BIN_PATH}/#{filename}"
  data_file_path = data_file(filename)

  verbose = options.include?('--verbose')

  pputs("Running #{bin_filepath}", color: :yellow, style: :italic) if verbose

  raise "There is no such file as #{bin_filepath}!" unless File.exist?(bin_filepath)

  tracking_file_exists = File.exist?(tracking_filepath)
  tracking_file_modified_on = tracking_file_exists ? File.mtime(tracking_filepath) : nil
  bin_file_modified_on = File.mtime(bin_filepath)
  bin_file_is_newer = tracking_file_exists && (bin_file_modified_on > tracking_file_modified_on)
  data_file_modified_on  = data_file_path ? File.mtime(data_file_path) : nil
  data_file_is_newer = data_file_path && tracking_file_exists && (data_file_modified_on > tracking_file_modified_on)
  file_needs_to_run = !tracking_file_exists || bin_file_is_newer || data_file_is_newer

  if verbose
    pputs("    data file: #{data_file_path ? data_file_path : 'None'}", color: :yellow, style: :italic)
    pputs("    data file modified: #{data_file_path ? data_file_modified_on : 'n/a'}", color: :yellow, style: :italic)
    pputs("    bin file modified: #{bin_file_modified_on}", color: :yellow, style: :italic)
    pputs("    last executed:  #{tracking_file_exists ? tracking_file_modified_on : 'never'}", color: :yellow, style: :italic)
  end

  # The options are an array; we gotta re-jigger them
  # so they don't end up nested when passed through
  pass_through_options = options.join(' ')

  if file_needs_to_run
    pputs("    Executing #{bin_filepath}", color: :yellow, style: :italic) if verbose
    system("#{bin_filepath} #{pass_through_options}")
    FileUtils.touch(tracking_filepath)
  elsif verbose
    pputs("    Skipping #{bin_filepath}", color: :yellow, style: :italic) if verbose
  end
end

def add_executable_to_path
  unless File.symlink?("/usr/local/bin/macoscfg")
    system("sudo ln -s ~/workspace/osx_setup/macos_setup /usr/local/bin/macoscfg")
  end
end

def run_setup(options)
  # Handle force flag - clear tracking data to force complete re-run
  if options.include?('--force')
    if Dir.exist?(TRACKING_FILES_PATH)
      pputs "üóëÔ∏è Clearing tracking data for forced re-run...", style: :bold, color: :yellow
      FileUtils.rm_rf(TRACKING_FILES_PATH)
    end
  end
  
  FileUtils.mkdir_p(TRACKING_FILES_PATH)

  horizontal_rule(:cyan)
  pputs "üëæ Setting up this bad boy here", style: :bold, color: :cyan
  horizontal_rule(:cyan)

  # This is just bullshitting
  system("#{BIN_PATH}/cool_art")

  # Make sure we have the latest
  system("bin/update_to_latest")

  # These are the actual setup files.  Order matters here
  run_file("create_folders", options)
  run_file("setup_macos", options)
  run_file("sync_dotfiles", options)
  run_file("install_apps", options)
  run_file("manage_packages", options)
  run_file("setup_app_configs", options)
  run_file("manual_todos", options)

  add_executable_to_path

  horizontal_rule(:cyan)
  pputs "üçª All done!  This thing is good to go", style: :bold, color: :green
  horizontal_rule(:cyan)
end

# Main entry point
def main(options)
  # Handle --update flag to run hygiene instead of full setup
  if options.include?('--update')
    puts "Running system hygiene..."
    exec "bin/hygiene"
  else
    # Ensure sudo is available for the full setup
    unless SudoManager.ensure_sudo_available
      puts "Setup cancelled - administrator authentication required."
      exit 1
    end
    
    run_setup(options)
  end
end

main(ARGV)
