#!/bin/bash

indent() {
  printf "    "
}

print_starting() {
  indent
  printf "\e[1m"
  printf '%s ' "$@"
  printf "\e[0m"
}

print_finished() {
  CHAR_LENGTH=$1
  declare -i REMAINING_CHARS
  REMAINING_CHARS=74-$CHAR_LENGTH
  for ((n=0;n<$REMAINING_CHARS;n++))
  do
    printf "."
  done
  printf "âœ…\n"
}

do_global_settings() {
  ITEM="Setting up some global preferences"
  print_starting $ITEM

  # Always show scrollbars
  defaults write NSGlobalDomain AppleShowScrollBars -string "Always"

  # Expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Expand print panel by default
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  # Automatically quit printer app once the print jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # Don't automatically adjust the brightness of the screen
  sudo defaults write /Library/Preferences/com.apple.iokit.AmbientLightSensor "Automatic Display Enabled" -bool false

  # Disable "close windows when quitting an app"
  defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool true

  # Enable dark mode
  defaults write NSGlobalDomain AppleInterfaceStyle -string "Dark"

  print_finished ${#ITEM}
}

do_keyboard_setup() {
  ITEM="Setting up keyboard preferences"
  print_starting $ITEM

  # Fast key repeats
  defaults write -g InitialKeyRepeat -int 15
  defaults write -g KeyRepeat -int 2
  
  # Disable press-and-hold for special characters (requires logout/restart)
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  
  # Enable full keyboard access for all controls
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

  # Disable automatic keyboard brightness
  defaults write com.apple.BezelServices kDim -bool false

  # Disable autocorrect
  defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false

  # Disable auto-capitalize
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

  # Disable auto period insert
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

  # Disable smart quotes (useful for developers)
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

  # Disable smart dashes (useful for developers)
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

  # Enable text replacement everywhere
  defaults write -g WebAutomaticTextReplacementEnabled -bool true

  print_finished ${#ITEM}
}

do_dock_setup() {
  ITEM="Setting up the dock"
  print_starting $ITEM

  # Remove all default apps from the dock
  defaults write com.apple.dock persistent-apps -array

  # Only show active things in the dock
  defaults write com.apple.dock static-only -bool true
  # Autohide the dock
  defaults write com.apple.dock autohide -bool true
  # Put it on the left
  defaults write com.apple.dock orientation -string "left"

  # Hot corners
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  # 10: Put display to sleep
  # 11: Launchpad
  # 12: Notification Center
  defaults write com.apple.dock wvous-bl-corner -int 5
  defaults write com.apple.dock wvous-bl-modifier -int 0

  # No dock bouncing, ever
  defaults write com.apple.dock no-bouncing -bool TRUE

  # Set icon size
  defaults write com.apple.dock tilesize -int 36

  # Don't automatically rearrange Spaces based on most recent use
  defaults write com.apple.dock mru-spaces -bool false

  # Speed up Mission Control animations
  defaults write com.apple.dock expose-animation-duration -float 0.1

  print_finished ${#ITEM}
}

do_trackpad_setup() {
  ITEM="Setting up the trackpad"
  print_starting $ITEM

  # Enable one-click taps
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Trackpad: enable right click with two fingers
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
  defaults write com.apple.AppleMultitouchTrackpad TrackpadRightClick -bool true
  defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true
  defaults write com.apple.AppleMultitouchTrackpad TrackpadRightClick -bool true

  # Enable Force Click and haptic feedback
  defaults write NSGlobalDomain com.apple.trackpad.forceClick -bool true
  defaults write com.apple.AppleMultitouchTrackpad ForceSuppressed -bool false

  print_finished ${#ITEM}
}

do_fix_screenshots() {
  ITEM="Fixing screenshot behavior"
  print_starting $ITEM

  # Set screenshot location (folder created by create_folders script)
  defaults write com.apple.screencapture location ~/Screenshots

  # To hell with preview thumbnails
  defaults write com.apple.screencapture show-thumbnail -bool FALSE

  # Use PNG format for screenshots
  defaults write com.apple.screencapture type -string "png"

  print_finished ${#ITEM}
}

do_finder_setup() {
  ITEM="Setting up the finder"
  print_starting $ITEM

  # Show all extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  # Default new windows to column view
  defaults write com.apple.Finder FXPreferredViewStyle clmv
  # Allow quitting finder with cmd+Q
  defaults write com.apple.finder QuitMenuItem -bool true
  # Finder: show hidden files by default
  defaults write com.apple.finder AppleShowAllFiles -bool true
  # Finder: show status bar
  defaults write com.apple.finder ShowStatusBar -bool true
  # Finder: show path bar
  defaults write com.apple.finder ShowPathbar -bool true
  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
  # Disable the warning before emptying the Trash
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
  # Set Desktop as the default location for new Finder windows
  defaults write com.apple.finder NewWindowTarget -string "PfDe"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"
  # Show icons for hard drives, servers, and removable media on the desktop
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

  # Show the ~/Library folder
  chflags nohidden ~/Library

  # Enable spring loading for directories
  defaults write NSGlobalDomain com.apple.springing.enabled -bool true

  # Remove the spring loading delay for directories
  defaults write NSGlobalDomain com.apple.springing.delay -float 0

  print_finished ${#ITEM}
}

do_screensaver_setup() {
  ITEM="Setting up the screensaver"
  print_starting $ITEM

  # Use Flurry screensaver
  defaults -currentHost write com.apple.screensaver moduleDict -dict path -string "/System/Library/Screen Savers/Flurry.saver" moduleName -string "Flurry" type -int 0
  # Never start it
  defaults -currentHost write com.apple.screensaver idleTime -int 0

  print_finished ${#ITEM}
}

do_sound_setup() {
  ITEM="Setting up sound preferences"
  print_starting $ITEM
  # Set alert sound to submarine
  defaults write .GlobalPreferences com.apple.sound.beep.sound /System/Library/Sounds/Submarine.aiff
  print_finished ${#ITEM}
}

do_menubar_setup() {
  ITEM="Setting up menu bar preferences"
  print_starting $ITEM

  # Show battery percentage in menu bar
  defaults -currentHost write com.apple.controlcenter BatteryShowPercentage -bool true

  print_finished ${#ITEM}
}

do_set_spotlight_preferences() {
  ITEM="Setting up spotlight preferences"
  print_starting $ITEM

  # Set spotlight keyboard shortcut to control+space using PlistBuddy (most reliable method)
  local plist="$HOME/Library/Preferences/com.apple.symbolichotkeys.plist"
  
  # Ensure the plist exists
  if [[ ! -f "$plist" ]]; then
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict
  fi
  
  # Disable conflicting input source shortcuts that use Control+Space
  /usr/libexec/PlistBuddy "$plist" -c "Set :AppleSymbolicHotKeys:60:enabled false" 2>/dev/null || true
  
  # Remove existing Spotlight entry if it exists (prevents conflicts)
  /usr/libexec/PlistBuddy "$plist" -c "Delete :AppleSymbolicHotKeys:64" 2>/dev/null || true
  
  # Add the new Control+Space configuration for Spotlight
  # Parameters: 65535 (special modifier code), 49 (space keycode), 262144 (control modifier)
  /usr/libexec/PlistBuddy "$plist" \
    -c "Add :AppleSymbolicHotKeys:64 dict" \
    -c "Add :AppleSymbolicHotKeys:64:enabled bool true" \
    -c "Add :AppleSymbolicHotKeys:64:value dict" \
    -c "Add :AppleSymbolicHotKeys:64:value:parameters array" \
    -c "Add :AppleSymbolicHotKeys:64:value:parameters: integer 65535" \
    -c "Add :AppleSymbolicHotKeys:64:value:parameters: integer 49" \
    -c "Add :AppleSymbolicHotKeys:64:value:parameters: integer 262144" \
    -c "Add :AppleSymbolicHotKeys:64:value:type string standard" 2>/dev/null || true
  
  # Force refresh of system preferences without logout
  /System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u 2>/dev/null || true

  print_finished ${#ITEM}
}

do_kill_running_apps()  {
  ITEM="Restarting some things"
  print_starting $ITEM

  killall Dock 2>/dev/null || true
  killall "Notification Center" 2>/dev/null || true
  killall Finder 2>/dev/null || true
  killall SystemUIServer 2>/dev/null || true
  killall cfprefsd 2>/dev/null || true
  
  # Restart processes for keyboard/trackpad settings
  sudo pkill -f "/System/Library/CoreServices/RemoteManagement/ARDAgent.app" 2>/dev/null || true
  
  # Force refresh of trackpad/keyboard preferences
  defaults -currentHost delete -globalDomain com.apple.mouse.tapBehavior 2>/dev/null || true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
  
  # Restart TextInput for keyboard settings
  killall "TextInputMenuAgent" 2>/dev/null || true
  
  # For print dialog changes to take effect
  killall "Print Center" 2>/dev/null || true
  
  # Clear the font cache (in case any font-related changes were made)
  sudo atsutil databases -remove >/dev/null 2>&1 || true

  print_finished ${#ITEM}
}

do_setup() {
  printf "\n\e[33;1mSetting up macOS\e[0m\n"
  printf "\e[33;1m--------------------------------------------------------------------------------\e[0m\n"

  do_global_settings
  do_keyboard_setup
  do_trackpad_setup
  do_dock_setup
  do_fix_screenshots
  do_finder_setup
  do_screensaver_setup
  do_sound_setup
  do_menubar_setup
  do_set_spotlight_preferences

  do_kill_running_apps
  printf "\n\e[32;1m    macOS is setup.\e[0m\n"
  printf "\e[33;1m    Note: Key repeat and press-and-hold settings require logout/restart to take effect.\e[0m\n"
  printf "\e[33;1m    Other settings (trackpad, keyboard brightness) may also need a restart.\e[0m\n"
}

do_setup
