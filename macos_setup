#!/usr/bin/env ruby

require 'fileutils'
require_relative './lib/terminal_helpers.rb'

BIN_PATH = "./bin"
DATA_PATH="./data"
TRACKING_FILES_PATH="./data/.meta/last_run"

DATA_FILE_EXTENSIONS = %w{txt json}

def data_file(filename)
  DATA_FILE_EXTENSIONS.each do |extension|
    filepath = "#{DATA_PATH}/#{filename}.#{extension}"
    return filepath if File.exists?(filepath)
  end
  nil
end

def run_file(filename, options=[])
  tracking_filepath = "#{TRACKING_FILES_PATH}/#{filename}"
  bin_filepath = "#{BIN_PATH}/#{filename}"
  data_file_path = data_file(filename)

  verbose = options.include?('--verbose')

  pputs("Running #{bin_filepath}", color: :yellow, style: :italic) if verbose

  raise "There is no such file as #{bin_filepath}!" unless File.exists?(bin_filepath)

  tracking_file_exists = File.exists?(tracking_filepath)
  tracking_file_modified_on = tracking_file_exists ? File.mtime(tracking_filepath) : nil
  bin_file_modified_on = File.mtime(bin_filepath)
  bin_file_is_newer = tracking_file_exists && (bin_file_modified_on > tracking_file_modified_on)
  data_file_modified_on  = data_file_path ? File.mtime(data_file_path) : nil
  data_file_is_newer = data_file_path && tracking_file_exists && (data_file_modified_on > tracking_file_modified_on)
  file_needs_to_run = !tracking_file_exists || bin_file_is_newer || data_file_is_newer

  if verbose
    pputs("    data file: #{data_file_path ? data_file_path : 'None'}", color: :yellow, style: :italic)
    pputs("    data file modified: #{data_file_path ? data_file_modified_on : 'n/a'}", color: :yellow, style: :italic)
    pputs("    bin file modified: #{bin_file_modified_on}", color: :yellow, style: :italic)
    pputs("    last executed:  #{tracking_file_exists ? tracking_file_modified_on : 'never'}", color: :yellow, style: :italic)
  end

  # The options are an array; we gotta re-jigger them
  # so they don't end up nested when passed through
  pass_through_options = options.join(' ')

  if file_needs_to_run
    pputs("    Executing #{bin_filepath}", color: :yellow, style: :italic) if verbose
    system("#{bin_filepath} #{pass_through_options}")
    FileUtils.touch(tracking_filepath)
  elsif verbose
    pputs("    Skipping #{bin_filepath}", color: :yellow, style: :italic) if verbose
  end
end

def add_executable_to_path
  unless File.symlink?("/usr/local/bin/macoscfg")
    system("sudo ln -s ~/workspace/osx_setup/macos_setup /usr/local/bin/macoscfg")
  end
end

def run_setup(options)
  FileUtils.mkdir_p(TRACKING_FILES_PATH)

  horizontal_rule(:cyan)
  pputs "üëæ Setting up this bad boy here", style: :bold, color: :cyan
  horizontal_rule(:cyan)

  # This is just bullshitting
  system("#{BIN_PATH}/cool_art")

  # Make sure we have the latest
  system("bin/update_to_latest")

  # These are the actual setup files.  Order matters here
  run_file("setup_macos", options)
  run_file("install_shell_apps", options)
  run_file("install_brew_apps", options)
  run_file("install_brew_cask_apps", options)
  run_file("install_mac_app_store_apps", options)
  run_file("install_gems", options)
  run_file("set_shell_preferences", options)
  run_file("sync_dotfiles", options)
  run_file("configure_terminal", options)
  run_file("manual_todos", options)

  add_executable_to_path

  horizontal_rule(:cyan)
  pputs "üçª All done!  This thing is good to go", style: :bold, color: :green
  horizontal_rule(:cyan)
end

run_setup(ARGV)
