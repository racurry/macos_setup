name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [opened, synchronize]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude') || contains(github.event.label.name, 'claude'))) ||
      (github.event_name == 'pull_request' && (contains(github.event.pull_request.body, '@claude') || contains(github.event.pull_request.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          label_trigger: "claude"
          base_branch: "main"
          branch_prefix: "claude/"

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Auto-approve git and gh commands needed for creating PRs
          settings: |
            {
              "env": {
                "GH_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
              },
              "allowedCommands": [
                "Bash(git checkout:*)",
                "Bash(git add:*)",
                "Bash(git commit:*)",
                "Bash(git push:*)",
                "Bash(git branch:*)",
                "Bash(gh pr create:*)",
                "Bash(gh pr view:*)",
                "Bash(gh issue comment:*)",
                "Bash(gh issue view:*)"
              ]
            }

          # Custom prompt to ensure Claude follows standards and runs tests
          prompt: |
            REPO: ${{ github.repository }}
            ISSUE/PR: ${{ github.event.issue.number || github.event.pull_request.number }}

            Context:
            ${{ github.event.issue.title && format('Issue Title: {0}', github.event.issue.title) || '' }}
            ${{ github.event.issue.body && format('Issue Description: {0}', github.event.issue.body) || '' }}
            ${{ github.event.pull_request.title && format('PR Title: {0}', github.event.pull_request.title) || '' }}
            ${{ github.event.pull_request.body && format('PR Description: {0}', github.event.pull_request.body) || '' }}
            ${{ github.event.comment.body && format('Comment: {0}', github.event.comment.body) || '' }}
            ${{ github.event.review.body && format('Review: {0}', github.event.review.body) || '' }}

            Before starting any task:
            1. ALWAYS read and follow the guidance in @CLAUDE.md
            2. Read @AGENTS.md for any additional context and instructions
            3. Follow all coding standards and conventions found in the repository

            General Guidelines:
            - Use TodoWrite to track complex multi-step tasks
            - If the request is just a question, answer it without creating a PR
            - Be concise and efficient in your responses

            For any code changes:
            1. Run appropriate tests after making changes
            2. If tests fail, debug and fix the issues before completing
            3. Check for and fix any type errors or compilation issues
            4. If scripts error, investigate and resolve the root cause

            When working on issues (creating new code/fixes):
            1. Create a new branch for your changes
            2. Make the necessary code changes
            3. Commit your changes with a descriptive commit message
            4. Create a pull request with:
               - A clear title summarizing the changes
               - A description explaining what was done and why
               - IMPORTANT: Include "Fixes #${{ github.event.issue.number || github.event.pull_request.number }}" in the PR body to link it to this issue
            5. After successfully creating the PR:
               - Comment on the issue with a link to the PR
               - Include a brief summary of what was implemented
               - Use format: "I've created PR #<number> to address this issue. <brief summary>"
            6. DO NOT merge the PR - leave it open for review
            7. If you cannot create a PR for any reason (permissions, errors, etc.):
               - Add a comment to the issue explaining what you accomplished
               - Include details about what changes were made
               - Explain why a PR could not be created
               - Provide the commit SHA if changes were committed

            When working on PRs:
            - If reviewing code: Provide specific feedback on code quality, suggest improvements following repository standards, ensure test coverage
            - If responding to review comments: Address the feedback by making requested changes or explaining your approach
            - If the PR was just updated (synchronize event): Check if there are outstanding review comments to address

          # Configure tools Claude can use
          claude_args: >-
            --allowed-tools "
            Bash(git:*),
            Bash(gh:*),
            Bash(command -v:*),
            Bash(./*),
            Read(**),
            Edit(**),
            MultiEdit(**),
            Glob(**),
            Grep(**),
            Write(**),
            TodoWrite,
            Task,
            WebFetch,
            WebSearch
            "
            --model sonnet
