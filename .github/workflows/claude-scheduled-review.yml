name: Claude Scheduled Review

on:
  schedule:
    # Every 21 days at 9am UTC (roughly every 3 weeks)
    - cron: '0 9 */21 * *'
  workflow_dispatch: # Allows manual trigger for testing

jobs:
  health-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Health Check
        uses: anthropics/claude-code-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Tri-weekly codebase health check for macOS setup scripts.

            Read @AGENTS.md and @CLAUDE.md first to understand standards.

            Perform the following checks:

            1. Bash Script Quality:
               - Missing error handling (set -euo pipefail or equivalent)
               - Unquoted variables that could cause word splitting
               - TODO/FIXME comments over 30 days old (check git blame)
               - Scripts without corresponding tests in tests/unit/
               - Common bash antipatterns (using cat unnecessarily, useless use of grep, etc)

            2. Documentation Health:
               - Are all scripts in scripts/bash/ mentioned in documentation?
               - Does AGENTS.md accurately reflect current project structure?
               - Any broken internal links in markdown files?
               - Functions/scripts lacking comments or documentation

            3. Documentation Validation (Code vs Docs):
               - Compare README.md examples with actual script usage/flags
               - Check if documented function signatures match actual implementations
               - Verify documented file paths still exist (renamed/moved files)
               - Compare documented CLI flags with actual getopts/argument parsing
               - Check if documented dependencies match actual script requirements
               - Verify example commands in docs would actually work
               - Find environment variables used in code but not documented

            4. Test Coverage:
               - Which scripts in scripts/bash/ lack tests in tests/unit/?
               - Any .bats test files that haven't been updated in 90+ days?
               - Are there obvious test cases missing?

            5. Security Scanning:
               - Hardcoded credentials, API keys, tokens, or passwords
               - Secrets leaked in logs (echo/printf of sensitive variables)
               - Insecure file permissions (SSH keys, dotfiles, configs)
               - SSH key handling following security best practices
               - Command injection vulnerabilities (unquoted variables in dangerous contexts)
               - Path traversal risks (user input in file paths)
               - Use of curl/wget without SSL verification (-k, --insecure flags)
               - HTTP URLs that should be HTTPS (especially for downloads)
               - eval, exec with user-controlled input
               - Unsafe temporary file creation (predictable names, race conditions)
               - World-writable files or directories
               - Scripts running with unnecessary sudo/root privileges
               - Missing input validation on user-provided data
               - Insecure random number generation for security purposes
               - Files with SUID/SGID bits that shouldn't have them

            6. Code Quality:
               - Significant code duplication across scripts
               - Dead code or unused functions
               - Scripts that violate AGENTS.md conventions
               - Files that should be in .gitignore but aren't

            Create a SINGLE issue with all findings:
            - Title: "Codebase Health Report - $(date +%Y-%m-%d)"
            - Use sections: ðŸ”´ Critical / ðŸŸ¡ Important / ðŸŸ¢ Nice-to-have
            - Include file paths and line numbers
            - Provide specific suggestions for fixes
            - If everything is healthy, create issue: "âœ… All health checks passed - $(date +%Y-%m-%d)"

            Use: gh issue create --title "..." --body "..."

            Be thorough but focus on actionable items. Skip minor style issues.

          claude_args: '--allowed-tools "Bash(gh issue *),Bash(git *),Read(**),Glob(**),Grep(**)" --model sonnet'
